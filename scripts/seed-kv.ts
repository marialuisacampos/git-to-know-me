/**
 * Script para popular o KV com dados fake
 * Uso: npm run seed:kv
 */

import {
  setUserRegistered,
  setUserConfig,
  setUserProjects,
  setUserPosts,
  isUserRegistered,
} from "../lib/kv";
import type { ProjectMeta, PostMeta } from "../types/portfolio";

const FAKE_USERNAME = "demouser";

async function seed() {
  console.log("üå± Iniciando seed do KV...\n");

  try {
    // 1. Marcar usu√°rio como registrado
    console.log(`üìù Registrando usu√°rio: ${FAKE_USERNAME}`);
    await setUserRegistered(FAKE_USERNAME);

    // Verificar
    const registered = await isUserRegistered(FAKE_USERNAME);
    console.log(`‚úÖ Usu√°rio registrado: ${registered}\n`);

    // 2. Adicionar bio customizada
    console.log("üí¨ Adicionando bio...");
    await setUserConfig(FAKE_USERNAME, {
      bio: "Desenvolvedor full-stack apaixonado por criar experi√™ncias √∫nicas. Especialista em React, Next.js e design systems modernos.",
    });
    console.log("‚úÖ Bio adicionada\n");

    // 3. Adicionar 2 projetos fake
    console.log("üì¶ Adicionando projetos...");

    const projects: ProjectMeta[] = [
      {
        fullName: "demouser/awesome-portfolio",
        name: "awesome-portfolio",
        descriptionHtml: `<h1>Awesome Portfolio</h1>
<p>Um portfolio moderno e inovador constru√≠do com Next.js 15 e Tailwind CSS.</p>
<h2>Features</h2>
<ul>
<li>Glassmorphism design</li>
<li>Anima√ß√µes fluidas</li>
<li>Dark mode premium</li>
<li>Performance otimizada</li>
</ul>
<h2>Tech Stack</h2>
<p>Next.js, React, TypeScript, Tailwind CSS, Framer Motion</p>`,
        language: "TypeScript",
        topics: [
          "nextjs",
          "react",
          "tailwindcss",
          "portfolio",
          "glassmorphism",
        ],
        stars: 142,
        pushedAt: "2024-10-10T15:30:00Z",
        homepageUrl: "https://awesome-portfolio.vercel.app",
        previewUrl: "https://awesome-portfolio.vercel.app",
      },
      {
        fullName: "demouser/design-system",
        name: "design-system",
        descriptionHtml: `<h1>Design System</h1>
<p>Sistema de design completo e acess√≠vel, pronto para produ√ß√£o.</p>
<h2>Componentes</h2>
<ul>
<li>50+ componentes React</li>
<li>WCAG AAA compliance</li>
<li>Temas customiz√°veis</li>
<li>Storybook integrado</li>
</ul>
<p><strong>Instala√ß√£o:</strong> <code>npm install @demouser/design-system</code></p>
<p><strong>Demo:</strong> https://demouser-design-system.netlify.app</p>`,
        language: "TypeScript",
        topics: ["design-system", "react", "accessibility", "components"],
        stars: 89,
        pushedAt: "2024-10-08T10:15:00Z",
        previewUrl: "https://demouser-design-system.netlify.app",
      },
    ];

    await setUserProjects(FAKE_USERNAME, projects);
    console.log(`‚úÖ ${projects.length} projetos adicionados\n`);

    // 4. Adicionar 1 post fake
    console.log("üìù Adicionando post...");

    const posts: PostMeta[] = [
      {
        slug: "construindo-portfolio-moderno",
        title: "Construindo um Portfolio Moderno com Next.js 15",
        summary:
          "Aprenda a criar um portfolio impressionante com as √∫ltimas tecnologias web: Next.js 15, React Server Components, Tailwind CSS e anima√ß√µes premium.",
        contentMdx: `# Introdu√ß√£o

Neste artigo, vou compartilhar como constru√≠ meu portfolio usando as tecnologias mais modernas do ecossistema React.

## Por que Next.js 15?

Next.js 15 trouxe melhorias significativas:

- **React Server Components** por padr√£o
- **Turbopack** para builds ultra-r√°pidos
- **App Router** maduro e est√°vel
- **Streaming SSR** para performance

## Glassmorphism Design

O efeito de vidro fosco (glassmorphism) adiciona profundidade e modernidade:

\`\`\`css
backdrop-blur-2xl
bg-slate-900/30
border-slate-800/50
\`\`\`

### Vantagens

1. **Visual premium** - parece caro e polido
2. **Hierarquia clara** - layers de profundidade
3. **Legibilidade** - contraste mantido
4. **Performance** - GPU accelerated

## Anima√ß√µes Fluidas

Usei Tailwind CSS para anima√ß√µes:

\`\`\`tsx
<div className="animate-in fade-in slide-in-from-bottom-4 duration-700">
  <h1>T√≠tulo animado</h1>
</div>
\`\`\`

### Princ√≠pios

- **Stagger sequences** - elementos aparecem em ritmo
- **Easing suave** - ease-out para naturalidade
- **Dura√ß√£o adequada** - 300-700ms (n√£o muito r√°pido)

## C√≥digo de Exemplo

Aqui est√° como criar um card com glass effect:

\`\`\`typescript
export function GlassCard({ children }) {
  return (
    <div className="relative group">
      {/* Glow */}
      <div className="absolute -inset-0.5 bg-gradient-to-r 
           from-blue-600/20 to-purple-600/20 
           opacity-0 group-hover:opacity-100 
           blur-xl transition-opacity duration-500" />
      
      {/* Glass */}
      <div className="relative bg-slate-900/40 
           backdrop-blur-xl border border-slate-800/50 
           rounded-2xl p-6">
        {children}
      </div>
    </div>
  );
}
\`\`\`

## Performance

Mesmo com todas essas anima√ß√µes, o site mant√©m:

> **LCP** < 2.5s  
> **CLS** < 0.1  
> **FID** < 100ms

## Conclus√£o

Criar um portfolio moderno n√£o √© s√≥ sobre tecnologia, mas sobre **craft** - aten√ß√£o aos detalhes, anima√ß√µes suaves, e uma experi√™ncia que surpreende.

**Stack final:**
- Next.js 15
- TypeScript
- Tailwind CSS
- shadcn/ui
- Redis (KV)

---

_Espero que este artigo tenha inspirado voc√™ a criar algo √∫nico!_ ‚ú®`,
        tags: ["nextjs", "react", "typescript", "tutorial", "design"],
        publishedAt: "2024-10-12T09:00:00Z",
      },
    ];

    await setUserPosts(FAKE_USERNAME, posts);
    console.log(`‚úÖ ${posts.length} post adicionado\n`);

    // 5. Resumo
    console.log("üéâ Seed completo!\n");
    console.log("üìä Dados criados:");
    console.log(`   - Username: ${FAKE_USERNAME}`);
    console.log(`   - Projetos: ${projects.length}`);
    console.log(`   - Posts: ${posts.length}`);
    console.log(`   - Bio: ‚úì\n`);
    console.log("üåê Links √∫teis:");
    console.log(`   - Perfil:    http://localhost:3001/u/${FAKE_USERNAME}`);
    console.log(
      `   - Dashboard: http://localhost:3001/dev/login/${FAKE_USERNAME}`
    );
    console.log(`   - Dev Tools: http://localhost:3001/dev\n`);
    console.log("üí° Dica: Acesse /dev/login/demouser para simular login!\n");
  } catch (error) {
    console.error("‚ùå Erro ao fazer seed:", error);
    process.exit(1);
  }
}

// Executar
seed()
  .then(() => {
    console.log("‚úÖ Seed finalizado com sucesso!");
    process.exit(0);
  })
  .catch((error) => {
    console.error("‚ùå Erro fatal:", error);
    process.exit(1);
  });
